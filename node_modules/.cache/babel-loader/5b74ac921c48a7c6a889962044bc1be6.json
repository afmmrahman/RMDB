{"ast":null,"code":"import _defineProperty from \"/Users/Tareq/Desktop/UDEMY_courses/Beginner_React_(2019)_Create_a_Movie_Web_App/RMDB/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Tareq/Desktop/UDEMY_courses/Beginner_React_(2019)_Create_a_Movie_Web_App/RMDB/src/components/Movie/Movie.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fecthItems = async endpoint => {\n      const movieId = this.props.match.params.movieId;\n\n      try {\n        const result = await (await fetch(endpoint)).jason();\n\n        if (result.status_code) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          });\n          const creditsEndpoint = \"\".concat(API_URL, \"movie/\").concat(movieId, \"/credits?api_key=\").concat(API_KEY);\n          const creditsResult = await (await fetch(creditsEndpoint)).jason();\n          const directors = creditsResult.crew.filter(member => member.job === \"Director\");\n          this.setState({\n            actors: creditsResult.cast,\n            directors,\n            loading: false\n          }, () => {\n            localStorage.setItem(\"\".concat(movieId), JSON.stringify(this.state));\n          });\n        }\n      } catch (e) {\n        console.log(\"There was an error: \", e);\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(\"\".concat(this.props.match.params.movieId))) {\n      const state = JSON.parse(localStorage.getItem(\"\".concat(this.props.match.params.movieId)));\n      this.setState(_objectSpread({}, state));\n    } else {\n      this.setState({\n        loading: true\n      }); // first fetch the movie\n\n      const endpoint = \"\".concat(API_URL, \"movie/\").concat(this.props.match.params.movieId, \"?api_key=\").concat(API_KEY, \"&language=en-US\");\n      this.fetchItems(endpoint);\n    }\n  }\n\n  /* fetchItems = (endpoint) => {\n       fetch(endpoint)\n      .then(result => result.json())\n      .then(result => {\n          //console.log(result)\n          if(result.status_code) {\n              this.setState({ loading: false}); \n          } else {\n              this.setState({ movie: result }, () => {\n                  // ...then fetch actors in the setState callback function\n                  const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\n                  fetch(endpoint)\n                  .then(result => result.json())\n                  .then(result => {\n                      const directors = result.crew.filter( (member) => member.job === \"Director\"); \n                       this.setState ({\n                          actors: result.cast,\n                          directors,\n                          loading: false\n                      }, () => {\n                          localStorage.setItem(`${this.props.match.params.movieId}`, JSON.stringify(this.state));\n                      })\n                  })\n               })\n          }\n       })\n      .catch( error => console.error('Error:', error))\n  }\n  */\n  render() {\n    return React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.movie ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      movie: this.props.location.movieName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(MovieInfo, {\n      movie: this.state.movie,\n      directors: this.state.directors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(MovieInfoBar, {\n      time: this.state.movie.runtime,\n      budget: this.state.movie.budget,\n      revenue: this.state.movie.revenue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })) : null, this.state.actors ? React.createElement(\"div\", {\n      className: \"rmdb-movie-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(FourColGrid, {\n      header: 'Actors',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.state.actors.map((element, i) => {\n      return React.createElement(Actor, {\n        key: i,\n        actor: element,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      });\n    }))) : null, !this.state.actors && !this.state.loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"No Movie Found !\") : null, this.state.loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["/Users/Tareq/Desktop/UDEMY_courses/Beginner_React_(2019)_Create_a_Movie_Web_App/RMDB/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fecthItems","endpoint","movieId","props","match","params","result","fetch","jason","status_code","setState","creditsEndpoint","creditsResult","crew","filter","member","job","cast","localStorage","setItem","JSON","stringify","e","console","log","componentDidMount","getItem","parse","fetchItems","render","location","movieName","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { API_URL, API_KEY} from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\n\nimport './Movie.css';\n \nclass Movie extends Component {\n    state = {\n         movie: null,\n         actors: null,\n         directors: [],\n         loading: false\n    }\n\n    componentDidMount() {\n        if(localStorage.getItem(`${this.props.match.params.movieId}`)){\n            const state = JSON.parse(localStorage.getItem(`${this.props.match.params.movieId}`));\n            this.setState({ ...state });\n        } else {\n            this.setState({ loading: true})\n            // first fetch the movie\n            const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n            this.fetchItems(endpoint);\n        }\n    }\n\n\n    fecthItems = async endpoint => {\n        const { movieId } = this.props.match.params;\n\n        try {\n            const result = await (await fetch(endpoint)).jason();\n            if(result.status_code) {\n                this.setState({ loading: false}); \n            } else {\n                this.setState({ movie: result })\n                const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n                const creditsResult = await (await fetch(creditsEndpoint)).jason();\n                const directors = creditsResult.crew.filter( (member) => member.job === \"Director\");\n                this.setState ({\n                    actors: creditsResult.cast,\n                    directors,\n                    loading: false\n                }, () => {\n                    localStorage.setItem(`${movieId}`, JSON.stringify(this.state));\n                })\n            }\n        }\n        catch (e) {\n            console.log(\"There was an error: \", e);\n        }\n    }\n\n\n    /* fetchItems = (endpoint) => {\n\n        fetch(endpoint)\n        .then(result => result.json())\n        .then(result => {\n            //console.log(result)\n            if(result.status_code) {\n                this.setState({ loading: false}); \n            } else {\n                this.setState({ movie: result }, () => {\n                    // ...then fetch actors in the setState callback function\n                    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\n                    fetch(endpoint)\n                    .then(result => result.json())\n                    .then(result => {\n                        const directors = result.crew.filter( (member) => member.job === \"Director\"); \n\n                        this.setState ({\n                            actors: result.cast,\n                            directors,\n                            loading: false\n                        }, () => {\n                            localStorage.setItem(`${this.props.match.params.movieId}`, JSON.stringify(this.state));\n                        })\n                    })\n\n                })\n            }\n\n        })\n        .catch( error => console.error('Error:', error))\n    }\n */\n    render() {\n        return (\n            <div className=\"rmdb-movie\">\n                {this.state.movie ?\n                    <div>\n                        <Navigation movie={this.props.location.movieName} />\n                        <MovieInfo movie={this.state.movie} directors={this.state.directors} />\n                        <MovieInfoBar time={this.state.movie.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue} />  \n                    </div>\n                : null }\n                {this.state.actors ? \n                    <div className=\"rmdb-movie-grid\">\n                        <FourColGrid\n                            header={'Actors'}\n                        >\n                            {this.state.actors.map(( element, i) => {\n                                return <Actor key={i} actor={element} />\n                            })}    \n                        </FourColGrid>\n                    </div>\n                : null }\n                {!this.state.actors && !this.state.loading ? <h1>No Movie Found !</h1> : null}\n                {this.state.loading ? <Spinner /> : null}\n                  \n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\nexport default Movie;"]},"metadata":{},"sourceType":"module"}